list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
while (total_weight < 15000){
for (i in list_watermelons){
watermelon_weight <- sample(possible_weight, 1)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
}
} # end of for loop
} # end of while loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
while (total_weight < 15000){
for (i in list_watermelons){
watermelon_weight <- sample(possible_weight, 1)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
} # end of for loop
} # end of while loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
for (i in list_watermelons){
while (total_weight < 15000){
watermelon_weight <- sample(possible_weight, 1)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
} # end of while loop
} # end of for loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
for (i in list_watermelons){
while (total_weight < 15000){
watermelon_weight <- sample(possible_weight, 1)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
} # end of while loop
} # end of for loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
for (i in list_watermelons){
while (total_weight < 10000){
watermelon_weight <- sample(possible_weight, 1)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
} # end of while loop
} # end of for loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
for (i in list_watermelons){
while (total_weight < 10000){
watermelon_weight <- sample(possible_weight, 1)
print(i)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
} # end of while loop
} # end of for loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
for (i in list_watermelons){
while (total_weight < 10000){
watermelon_weight <- sample(possible_weight, 1)
print(i)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
} # end of while loop
} # end of for loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
for (i in list_watermelons){
while (total_weight < 10000){
watermelon_weight <- sample(possible_weight, 1)
print(i+1)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
} # end of while loop
} # end of for loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
for (i in list_watermelons){
while (total_weight < 10000){
watermelon_weight <- sample(possible_weight, 1)
print(i)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
return(total_weight)
} # end of while loop
} # end of for loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
for (i in list_watermelons){
while (total_weight < 10000){
watermelon_weight <- sample(possible_weight, 1)
print(i)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
return(total_weight)
} # end of while loop
} # end of for loop
# A simple while-loop
#number = 0
#while (number < 10){ # While the number is below 10, do the following
# print(number)
# number = number + 1
#}
# your simple while-loop here
watermelons <- 10
list_watermelons <- seq(1, watermelons, 1)
df_wm_weight <- data.frame(list_watermelons)
possible_weight <- rnorm(500, mean = 2000,sd = 350)
total_weight <- 0
for (i in list_watermelons){
while (total_weight < 10000){
watermelon_weight <- sample(possible_weight, 1)
print(i)
print(watermelon_weight)
total_weight = watermelon_weight + total_weight
print("Total weight")
print(total_weight)
return(total_weight)
} # end of while loop
} # end of for loop
# Function to convert Fahrenheit to Celsius
convert_to_celsius <- function(fahrenheit) {
# Your code here
# Hint: Apply the conversion formula within the function
celsius <- (fahrenheit-32)*5/9
return(celcius)
}
# Example of how the final function (when you've written it) should be used:
# temp_celsius <- convert_to_celsius(68)
# print(temp_celsius)
# Expected Output (for fahrenheit = 68): 20
convert_to_celsius(50)
return(celsius)
# Function to convert Fahrenheit to Celsius
convert_to_celsius <- function(fahrenheit) {
# Your code here
# Hint: Apply the conversion formula within the function
celsius <- (fahrenheit-32)*5/9
return(celsius)
}
# Example of how the final function (when you've written it) should be used:
# temp_celsius <- convert_to_celsius(68)
# print(temp_celsius)
# Expected Output (for fahrenheit = 68): 20
convert_to_celsius(50)
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if temperature > 25{
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25){
print("Wear A T-shirt, maybe less it's hot outside")
} else if temperature > 15 && temperature < 25{
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25){
print("Wear A T-shirt maybe less it's hot outside")
} else if temperature > 15 && temperature < 25{
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25){
print("Wear A T-shirt maybe less it's hot outside")
} else if temperature > 15 && temperature < 25{
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25) {
print("Wear A T-shirt maybe less it's hot outside")
} else if temperature > 15 && temperature < 25{
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25) {
print("Wear A T-shirt maybe less it's hot outside")
}
# Example of how the final function (when you've written it) should be used:
# advice <- clothing_advice(20)
# print(advice)
# Expected Output (for temperature = 20): "Wear a light jacket."
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25) {
print("Wear A T-shirt maybe less it's hot outside")
}
return("Wear a T_shirt")
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25) {
print("Wear A T-shirt maybe less it's hot outside")
return("Wear a T_shirt")
}
# Example of how the final function (when you've written it) should be used:
# advice <- clothing_advice(20)
# print(advice)
# Expected Output (for temperature = 20): "Wear a light jacket."
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25) {
return("Wear a T_shirt")
}
# Example of how the final function (when you've written it) should be used:
# advice <- clothing_advice(20)
# print(advice)
# Expected Output (for temperature = 20): "Wear a light jacket."
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25) {
return("Wear a T_shirt")
}
}
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
# Your code here
# Hint: Use if-else statements to check the temperature and return the advice
if (temperature > 25) {
return("Wear a T_shirt")
} else if (temperature > 15 && temperature < 25){
return("Wear a light jacket")
} else {
return("Wear a warm coat")
}
}
# Example of how the final function (when you've written it) should be used:
# advice <- clothing_advice(20)
# print(advice)
# Expected Output (for temperature = 20): "Wear a light jacket."
# Example of how the final function (when you've written it) should be used:
# advice <- clothing_advice(20)
# print(advice)
# Expected Output (for temperature = 20): "Wear a light jacket."
advice <- clothing_advice(20)
print(advice)
# Example of how the final function (when you've written it) should be used:
# advice <- clothing_advice(20)
# print(advice)
# Expected Output (for temperature = 20): "Wear a light jacket."
advice <- clothing_advice(14)
print(advice)
# your code here
m_h <- rnorm(100, mean = 69.1, sd = 2.9)
w_h <- rnorm(100, mean = 63.7, sd = 2.7)
n_sims <- 1000
m_h_default <- rnorm(100, mean = 69.1, sd = 2.9)
w_h_default <- rnorm(100, mean = 63.7, sd = 2.7)
print(m_h_default)
# your code here
store_diff <- rep(NA, n_sims)
print(store_diff)
# your code here
n_sims <- 1000
store_diff <- rep(NA, n_sims)
print(store_diff)
for (n in 1:n_sims){
m_h <- rnorm(100, mean = 69.1, sd = 2.9)
w_h <- rnorm(100, mean = 63.7, sd = 2.7)
diff <- mean(m_h) - mean(w_h)
store_diff[n] <- diff
print(diff)
}
df_h_5.5 <- data.frame(n_sims, store_diff)
View(df_h_5.5)
df_h_5.5 <- data.frame(1:1000, store_diff)
View(df_h_5.5)
ggplot(data = df_h_5.5, aes(x = store_diff)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
theme_minimal()
# your code here
n_sims <- 1000
store_diff <- rep(NA, n_sims)
print(store_diff)
for (n in 1:n_sims){
m_h <- rnorm(100, mean = 69.1, sd = 2.9)
w_h <- rnorm(100, mean = 63.7, sd = 2.7)
diff <- mean(m_h) - mean(w_h)
store_diff[n] <- diff
print(diff)
}
df_h_5.5 <- data.frame(1:1000, store_diff)
ggplot(data = df_h_5.5, aes(x = store_diff)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
theme_minimal()
)
# your code here
n_sims <- 1000
store_diff <- rep(NA, n_sims)
#print(store_diff)
for (n in 1:n_sims){
m_h <- rnorm(100, mean = 69.1, sd = 2.9)
w_h <- rnorm(100, mean = 63.7, sd = 2.7)
diff <- mean(m_h) - mean(w_h)
store_diff[n] <- diff
#print(diff)
}
df_h_5.5 <- data.frame(1:1000, store_diff)
ggplot(data = df_h_5.5, aes(x = store_diff)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
theme_minimal()
)
# your code here
n_sims <- 1000
store_diff <- rep(NA, n_sims)
#print(store_diff)
for (n in 1:n_sims){
m_h <- rnorm(100, mean = 69.1, sd = 2.9)
w_h <- rnorm(100, mean = 63.7, sd = 2.7)
diff <- mean(m_h) - mean(w_h)
store_diff[n] <- diff
#print(diff)
}
df_h_5.5 <- data.frame(1:1000, store_diff)
ggplot(data = df_h_5.5, aes(x = store_diff)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
theme_minimal()
# your code here
n_sims <- 1000
store_diff <- rep(NA, n_sims)
#print(store_diff)
for (n in 1:n_sims){
m_h <- rnorm(100, mean = 69.1, sd = 2.9)
w_h <- rnorm(100, mean = 63.7, sd = 2.7)
diff <- mean(m_h) - mean(w_h)
store_diff[n] <- diff
#print(diff)
}
df_h_5.5 <- data.frame(1:1000, store_diff)
ggplot(data = df_h_5.5, aes(x = store_diff)) +
geom_histogram(binwidth = 0.0025, fill = "blue", color = "black") +
theme_minimal()
# your code here
n_sims <- 1000
store_diff <- rep(NA, n_sims)
#print(store_diff)
for (n in 1:n_sims){
m_h <- rnorm(100, mean = 69.1, sd = 2.9)
w_h <- rnorm(100, mean = 63.7, sd = 2.7)
diff <- mean(m_h) - mean(w_h)
store_diff[n] <- diff
#print(diff)
}
df_h_5.5 <- data.frame(1:1000, store_diff)
ggplot(data = df_h_5.5, aes(x = store_diff)) +
geom_histogram(binwidth = 0.05, fill = "blue", color = "black") +
theme_minimal()
# compare their exact values
mean_diff <- mean(store_diff)
mean_diff
sd_diff <- sd(store_diff)
sd_diff
mean_diff
# compare their exact values
mean_diff <- mean(store_diff)
mean_diff
sd_diff <- sd(store_diff)
sd_diff
ggplot(data = df_h_5.5, aes(x = store_diff)) +
geom_histogram(binwidth = 0.05, fill = "blue", color = "black") +
theme_minimal()
View(df_h_5.5)
# compare their exact values
mean_diff <- mean(store_diff)
mean_diff
sd_diff <- sd(store_diff)
sd_diff
# your code here
n_sims <- 10000
store_diff <- rep(NA, n_sims)
#print(store_diff)
for (n in 1:n_sims){
m_h <- rnorm(100, mean = 69.1, sd = 2.9)
w_h <- rnorm(100, mean = 63.7, sd = 2.7)
diff <- mean(m_h) - mean(w_h)
store_diff[n] <- diff
#print(diff)
}
df_h_5.5 <- data.frame(1:n_sims, store_diff)
ggplot(data = df_h_5.5, aes(x = store_diff)) +
geom_histogram(binwidth = 0.05, fill = "blue", color = "black") +
theme_minimal()
# compare their exact values
mean_diff <- mean(store_diff)
mean_diff
sd_diff <- sd(store_diff)
sd_diff
